{"version":3,"sources":["../src/FormBinder.js"],"names":["FormBinder","originalObj","bindingDefs","options","_id","_onAnyModified","onAnyModified","_readOnly","readOnly","_metadata","metadata","_bindings","_originalObj","path","bindingDef","binding","isDisabled","_ensureFunc","isReadOnly","isVisible","noValue","state","alwaysGet","isValid","value","_getObjectPathValue","pre","unmodifiedValue","post","v","modified","_updateBindingAttributes","JSON","parse","stringify","obj","def","validator","constructor","Function","r","m","newValue","lastAnyModified","anyModified","Error","allValid","valid","Object","assign","disabled","visible","anyChanges","emit","getBindingState","trim","_setObjectPathValue","split","forEach","namePart","i","nameParts","length"],"mappings":"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","file":"FormBinder.js","sourcesContent":["import EventEmitter from \"eventemitter3\"\n\nexport class FormBinder extends EventEmitter {\n  constructor(originalObj, bindingDefs, options) {\n    super()\n    this._id = originalObj._id\n\n    if (options) {\n      if (typeof options === \"function\") {\n        this._onAnyModified = options\n      } else {\n        this._onAnyModified = options.onAnyModified\n        this._readOnly = options.readOnly\n        this._metadata = options.metadata\n      }\n    }\n\n    this._bindings = {}\n    this._originalObj = originalObj\n\n    for (let path in bindingDefs) {\n      let bindingDef = bindingDefs[path]\n      let binding = {\n        isDisabled: this._ensureFunc(bindingDef.isDisabled, false),\n        isReadOnly: this._ensureFunc(bindingDef.isReadOnly, false),\n        isVisible: this._ensureFunc(bindingDef.isVisible, true),\n        noValue: !!bindingDef.noValue,\n      }\n\n      if (binding.noValue) {\n        binding.state = {}\n      } else {\n        binding.alwaysGet = bindingDef.alwaysGet\n        binding.isValid = this._ensureFunc(bindingDef.isValid, true, true)\n\n        let value = FormBinder._getObjectPathValue(originalObj, path)\n\n        value = bindingDef.pre ? bindingDef.pre(value) : value\n        value = typeof value === \"undefined\" ? \"\" : value\n        binding.unmodifiedValue = value\n        binding.post = bindingDef.post || ((v) => v)\n        binding.state = {\n          value,\n          modified: false,\n        }\n      }\n\n      this._bindings[path] = binding\n    }\n\n    this._updateBindingAttributes()\n  }\n\n  get id() {\n    return this._id\n  }\n\n  get readOnly() {\n    return this._readOnly\n  }\n\n  getMetadata() {\n    return JSON.parse(JSON.stringify(this._metadata))\n  }\n\n  getOriginalObject() {\n    return JSON.parse(JSON.stringify(this._originalObj))\n  }\n\n  _ensureFunc(obj, def, validator) {\n    // If obj is a func and does not return bool there are problems, so we wrap it.\n    if (obj) {\n      if (obj.constructor === Function) {\n        if (validator) {\n          return (r, v, m) => !!obj(r, v, m)\n        } else {\n          return (r) => !!obj(r)\n        }\n      } else {\n        return () => !!obj\n      }\n    } else {\n      return () => def\n    }\n  }\n\n  updateBindingValue(path, newValue) {\n    let lastAnyModified = this.anyModified\n    let binding = this._bindings[path]\n\n    if (binding) {\n      if (binding.noValue) {\n        throw new Error(\n          `Attempt to update value for non-value binding '${path}'`\n        )\n      }\n\n      binding.state.value = newValue\n      binding.state.modified = newValue !== binding.unmodifiedValue\n\n      this._updateBindingAttributes()\n\n      if (lastAnyModified !== this.anyModified && this._onAnyModified) {\n        this._onAnyModified(this.anyModified)\n      }\n    }\n\n    return binding.state\n  }\n\n  _updateBindingAttributes() {\n    this.anyModified = false\n    this.allValid = true\n\n    // Do value bindings first\n    for (let path in this._bindings) {\n      let binding = this._bindings[path]\n\n      if (binding.noValue) {\n        continue\n      }\n\n      let valid = binding.isValid(this, binding.state.value)\n\n      // Only value bindings can change these two properties\n      this.allValid = valid && this.allValid\n      this.anyModified = binding.state.modified || this.anyModified\n\n      Object.assign(binding.state, {\n        valid,\n        disabled: binding.isDisabled(this),\n        readOnly: binding.isReadOnly(this),\n        visible: binding.isVisible(this),\n      })\n    }\n\n    // Do non-value bindings second\n    for (let path in this._bindings) {\n      let binding = this._bindings[path]\n\n      if (!binding.noValue) {\n        continue\n      }\n\n      let disabled = binding.isDisabled(this)\n      let readOnly = binding.isReadOnly(this)\n      let visible = binding.isVisible(this)\n\n      // Did the disabled, read-only or visible state of this binding change?\n      let anyChanges =\n        disabled !== binding.state.disabled ||\n        readOnly !== binding.state.readOnly ||\n        visible !== binding.state.visible\n\n      if (anyChanges) {\n        binding.state = {\n          disabled,\n          readOnly,\n          visible,\n        }\n\n        // Fire an event so the non-value component can update itself\n        this.emit(path, { path, state: binding.state })\n      }\n    }\n  }\n\n  getBindingValue(path) {\n    return this.getBindingState(path).value\n  }\n\n  getBindingState(path) {\n    let binding = this._bindings[path]\n\n    if (!binding) {\n      throw new Error(`There is no binding entry for '${path}'`)\n    }\n\n    return binding.state\n  }\n\n  getDeltaObject() {\n    // Generate an object that has the modified and alwaysGet bindings\n    let obj = {}\n\n    if (!this.anyModified && !this.allValid) {\n      return obj\n    }\n\n    // Will have an _id if updating\n    if (this._id) {\n      obj._id = this._id\n    }\n\n    for (let path in this._bindings) {\n      let binding = this._bindings[path]\n\n      if (binding.alwaysGet || (!binding.noValue && binding.state.modified)) {\n        let value = binding.state.value\n\n        if (value && value.constructor === \"String\") {\n          value = value.trim()\n\n          if (value === binding.unmodifiedValue) {\n            continue\n          }\n        }\n\n        value = binding.post ? binding.post(value) : value\n\n        FormBinder._setObjectPathValue(obj, path, value)\n      }\n    }\n\n    return obj\n  }\n\n  static _getObjectPathValue(obj, path) {\n    path.split(\".\").forEach((namePart) => {\n      if (obj) {\n        obj = obj[namePart]\n      }\n    })\n    return obj\n  }\n\n  static _setObjectPathValue(obj, path, value) {\n    path.split(\".\").forEach((namePart, i, nameParts) => {\n      if (i < nameParts.length - 1) {\n        if (!obj[namePart]) {\n          obj[namePart] = {}\n        }\n        obj = obj[namePart]\n      } else {\n        obj[namePart] = value\n      }\n    })\n  }\n}\n"]}