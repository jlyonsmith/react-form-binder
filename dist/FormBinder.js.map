{"version":3,"sources":["../src/FormBinder.js"],"names":["FormBinder","originalObj","bindings","onAnyModified","_updateFieldValue","bind","_id","fields","noValueFields","name","binding","field","isDisabled","ensureFunc","isReadOnly","isVisible","noValue","state","disabled","readOnly","visible","alwaysGet","isValid","initValue","undefined","originalValue","getObjectFieldValue","_updateOtherFields","obj","def","constructor","Function","newValue","meta","lastAnyModified","anyModified","value","valid","modified","changedField","allValid","anyChanges","emit","getFieldState","Error","trim","setObjectFieldValue","split","forEach","namePart","i","nameParts","length"],"mappings":"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","file":"FormBinder.js","sourcesContent":["import EventEmitter from 'eventemitter3'\n\nexport class FormBinder extends EventEmitter {\n  constructor(originalObj, bindings, onAnyModified) {\n    super()\n    this._updateFieldValue = this._updateFieldValue.bind(this)\n    this._id = originalObj._id\n    this.onAnyModified = onAnyModified\n    this.fields = {}\n    this.noValueFields = {}\n\n    for (let name in bindings) {\n      let binding = bindings[name]\n      let field = {\n        isDisabled: this.ensureFunc(binding.isDisabled, false),\n        isReadOnly: this.ensureFunc(binding.isReadOnly, false),\n        isVisible: this.ensureFunc(binding.isVisible, true),\n        noValue: !!binding.noValue\n      }\n\n      if (field.noValue) {\n        field.state = {\n          disabled: field.isDisabled(this),\n          readOnly: field.isReadOnly(this),\n          visible: field.isVisible(this),\n        }\n      } else {\n        field.alwaysGet = binding.alwaysGet\n        field.isValid = this.ensureFunc(binding.isValid, true)\n        field.initValue = (binding.initValue === undefined ? '' : binding.initValue)\n        field.originalValue = FormBinder.getObjectFieldValue(originalObj, name)\n        this._updateFieldValue(field, field.originalValue || field.initValue)\n      }\n      this.fields[name] = field\n    }\n\n    this._updateOtherFields()\n  }\n\n  ensureFunc(obj, def) {\n    return obj ? ((obj.constructor === Function) ? obj : () => (!!obj)) : () => (def)\n  }\n\n  updateFieldValue(name, newValue, meta) {\n    let lastAnyModified = this.anyModified\n    let field = this.fields[name]\n\n    if (field) {\n      this._updateFieldValue(field, newValue, meta)\n      this._updateOtherFields(field)\n      if (lastAnyModified !== this.anyModified && this.onAnyModified) {\n        this.onAnyModified(this.anyModified)\n      }\n    }\n\n    return field.state\n  }\n\n  _updateFieldValue(field, newValue) {\n    field.state = {\n      value: newValue,\n      disabled: field.isDisabled(this),\n      readOnly: field.isReadOnly(this),\n      visible: field.isVisible(this),\n      valid: field.isValid(this, newValue),\n      modified: field.originalValue !== undefined ?\n        (field.originalValue !== newValue) : (newValue !== field.initValue)\n    }\n  }\n\n  _updateOtherFields(changedField) {\n    if (changedField) {\n      this.anyModified = changedField.state.modified\n      this.allValid = changedField.state.valid\n    } else {\n      this.anyModified = false\n      this.allValid = true\n    }\n\n    for (let name in this.fields) {\n      let field = this.fields[name]\n\n      if (changedField === field) {\n        continue\n      }\n\n      let valid = undefined\n\n      if (!field.noValue) {\n        valid = field.isValid(this, field.state.value)\n\n        this.allValid = (valid && this.allValid)\n        this.anyModified = (field.state.modified || this.anyModified)\n      }\n\n      let disabled = field.isDisabled(this)\n      let readOnly = field.isReadOnly(this)\n      let visible = field.isVisible(this)\n\n      // Did the valid, disabled, read-only or visible state of this field change?\n      let anyChanges = (\n        valid !== field.state.valid ||\n        disabled !== field.state.disabled ||\n        readOnly !== field.state.readOnly ||\n        visible !== field.state.visible\n      )\n\n      if (anyChanges) {\n        field.state = {\n          valid,\n          disabled,\n          readOnly,\n          visible,\n          modified: field.state.modified,\n          value: field.state.value\n        }\n        // Fire an event the component can update itself\n        this.emit(name, { name, state: field.state })\n      }\n    }\n  }\n\n  getFieldValue(name) {\n    return this.getFieldState(name).value\n  }\n\n  getFieldState(name) {\n    let field = this.fields[name] || this.noValueFields[name]\n\n    if (!field) {\n      throw new Error(`Field '${name}' does not have a binding entry`)\n    }\n\n    return field.state\n  }\n\n  getModifiedFieldValues() {\n    // Generate an object that has the modified and alwaysGet fields\n    let obj = {}\n\n    if (!this.anyModified && !this.allValid) {\n      return obj\n    }\n\n    // Will have an _id if updating\n    if (this._id) {\n      obj._id = this._id\n    }\n\n    for (let name in this.fields) {\n      let field = this.fields[name]\n\n      if (field.alwaysGet || (!field.noValue && field.state.modified)) {\n        let value = field.state.value\n        \n        if (value && value.constructor === 'String') {\n          value = value.trim()\n        }\n        FormBinder.setObjectFieldValue(obj, name, value)\n      }\n    }\n\n    return obj\n  }\n\n  getOriginalFieldValues() {\n    // Generate an object that has the original values of all fields\n    let obj = {}\n\n    if (this._id) {\n      obj._id = this._id\n    }\n\n    for (let name in this.fields) {\n      let field = this.fields[name]\n\n      if (field.originalValue !== undefined) {\n        FormBinder.setObjectFieldValue(obj, name, field.originalValue)\n      }\n    }\n\n    return obj\n  }\n\n  static getObjectFieldValue(obj, name) {\n    name.split('.').forEach((namePart) => {\n      if (obj) {\n        obj = obj[namePart]\n      }\n    })\n    return obj\n  }\n\n  static setObjectFieldValue(obj, name, value) {\n    name.split('.').forEach((namePart, i, nameParts) => {\n      if (i < nameParts.length - 1) {\n        if (!obj[namePart]) {\n          obj[namePart] = {}\n        }\n        obj = obj[namePart]\n      } else {\n        obj[namePart] = value\n      }\n    })\n  }\n}\n"]}