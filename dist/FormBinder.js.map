{"version":3,"sources":["../src/FormBinder.js"],"names":["FormBinder","originalObj","bindings","onAnyModified","_id","fields","name","binding","field","isDisabled","ensureFunc","isReadOnly","isVisible","noValue","state","alwaysGet","isValid","initValue","undefined","originalValue","getObjectFieldValue","value","modified","_updateFieldStates","obj","def","validator","constructor","Function","r","v","m","metadata","newValue","lastAnyModified","anyModified","Error","allValid","valid","Object","assign","disabled","readOnly","visible","anyChanges","emit","getFieldState","trim","setObjectFieldValue","split","forEach","namePart","i","nameParts","length"],"mappings":"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","file":"FormBinder.js","sourcesContent":["import EventEmitter from 'eventemitter3'\n\nexport class FormBinder extends EventEmitter {\n  constructor(originalObj, bindings, onAnyModified) {\n    super()\n    this._id = originalObj._id\n    this.onAnyModified = onAnyModified\n    this.fields = {}\n\n    for (let name in bindings) {\n      let binding = bindings[name]\n      let field = {\n        isDisabled: this.ensureFunc(binding.isDisabled, false),\n        isReadOnly: this.ensureFunc(binding.isReadOnly, false),\n        isVisible: this.ensureFunc(binding.isVisible, true),\n        noValue: !!binding.noValue\n      }\n\n      if (field.noValue) {\n        field.state = {}\n      } else {\n        field.alwaysGet = binding.alwaysGet\n        field.isValid = this.ensureFunc(binding.isValid, true, true)\n        field.initValue = (binding.initValue === undefined ? '' : binding.initValue)\n        field.originalValue = FormBinder.getObjectFieldValue(originalObj, name)\n        field.state = {\n          value: field.originalValue || field.initValue,\n          modified: false\n        }\n      }\n\n      this.fields[name] = field\n    }\n\n    this._updateFieldStates()\n  }\n\n  ensureFunc(obj, def, validator) {\n    // If obj is a func and does not return bool there are problems, so we wrap it.\n    if (obj) {\n      if (obj.constructor === Function) {\n        if (validator) {\n          return (r, v, m) => (!!obj(r, v, m))\n        } else {\n          return (r) => (!!obj(r))\n        }\n      } else {\n        return () => (!!obj)\n      }\n    } else {\n      return () => (def)\n    }\n  }\n\n  updateFieldMetadata(name, metadata) {\n    let field = this.fields[name]\n\n    if (field) {\n      field.metadata = metadata\n    }\n  }\n\n  updateFieldValue(name, newValue) {\n    let lastAnyModified = this.anyModified\n    let field = this.fields[name]\n\n    if (field) {\n      if (field.noValue) {\n        throw new Error(`Attempt to update value for non-value field '${name}'`)\n      }\n\n      field.state.value = newValue\n      field.state.modified = (field.originalValue !== undefined ?\n        (field.originalValue !== newValue) : (newValue !== field.initValue))\n\n      this._updateFieldStates(field)\n\n      if (lastAnyModified !== this.anyModified && this.onAnyModified) {\n        this.onAnyModified(this.anyModified)\n      }\n    }\n\n    return field.state\n  }\n\n  _updateFieldStates() {\n    this.anyModified = false\n    this.allValid = true\n\n    for (let name in this.fields) {\n      let field = this.fields[name]\n\n      // Do non-value fields after value fields and ignore any just changed field\n      if (field.noValue) {\n        continue\n      }\n\n      let valid = field.isValid(this, field.state.value, field.metadata)\n\n      // Only value fields can change these two properties\n      this.allValid = (valid && this.allValid)\n      this.anyModified = (field.state.modified || this.anyModified)\n\n      Object.assign(field.state, {\n        valid,\n        disabled: field.isDisabled(this),\n        readOnly: field.isReadOnly(this),\n        visible: field.isVisible(this)\n      })\n    }\n\n    for (let name in this.fields) {\n      let field = this.fields[name]\n\n      if (!field.noValue) {\n        continue\n      }\n\n      let disabled = field.isDisabled(this)\n      let readOnly = field.isReadOnly(this)\n      let visible = field.isVisible(this)\n\n      // Did the valid, disabled, read-only or visible state of this field change?\n      let anyChanges = (\n        disabled !== field.state.disabled ||\n        readOnly !== field.state.readOnly ||\n        visible !== field.state.visible\n      )\n\n      if (anyChanges) {\n        field.state = {\n          disabled,\n          readOnly,\n          visible\n        }\n\n        // Fire an event so the component can update itself\n        this.emit(name, { name, state: field.state })\n      }\n    }\n  }\n\n  getFieldValue(name) {\n    return this.getFieldState(name).value\n  }\n\n  getFieldState(name) {\n    let field = this.fields[name]\n\n    if (!field) {\n      throw new Error(`Field '${name}' does not have a binding entry`)\n    }\n\n    return field.state\n  }\n\n  getModifiedFieldValues() {\n    // Generate an object that has the modified and alwaysGet fields\n    let obj = {}\n\n    if (!this.anyModified && !this.allValid) {\n      return obj\n    }\n\n    // Will have an _id if updating\n    if (this._id) {\n      obj._id = this._id\n    }\n\n    for (let name in this.fields) {\n      let field = this.fields[name]\n\n      if (field.alwaysGet || (!field.noValue && field.state.modified)) {\n        let value = field.state.value\n\n        if (value && value.constructor === 'String') {\n          value = value.trim()\n        }\n        FormBinder.setObjectFieldValue(obj, name, value)\n      }\n    }\n\n    return obj\n  }\n\n  getOriginalFieldValues() {\n    // Generate an object that has the original values of all fields\n    let obj = {}\n\n    if (this._id) {\n      obj._id = this._id\n    }\n\n    for (let name in this.fields) {\n      let field = this.fields[name]\n\n      if (field.originalValue !== undefined) {\n        FormBinder.setObjectFieldValue(obj, name, field.originalValue)\n      }\n    }\n\n    return obj\n  }\n\n  static getObjectFieldValue(obj, name) {\n    name.split('.').forEach((namePart) => {\n      if (obj) {\n        obj = obj[namePart]\n      }\n    })\n    return obj\n  }\n\n  static setObjectFieldValue(obj, name, value) {\n    name.split('.').forEach((namePart, i, nameParts) => {\n      if (i < nameParts.length - 1) {\n        if (!obj[namePart]) {\n          obj[namePart] = {}\n        }\n        obj = obj[namePart]\n      } else {\n        obj[namePart] = value\n      }\n    })\n  }\n}\n"]}