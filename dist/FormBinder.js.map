{"version":3,"sources":["../src/FormBinder.js"],"names":["FormBinder","originalObj","bindings","onAnyModified","_id","_onAnyModified","_fields","_originalObj","name","binding","field","isDisabled","_ensureFunc","isReadOnly","isVisible","noValue","state","alwaysGet","isValid","initValue","value","_getObjectFieldValue","unmodifiedValue","post","v","pre","modified","_updateFieldStates","obj","def","validator","constructor","Function","r","m","newValue","lastAnyModified","anyModified","Error","allValid","valid","metadata","Object","assign","disabled","readOnly","visible","anyChanges","emit","getFieldState","trim","_setObjectFieldValue","split","forEach","namePart","i","nameParts","length"],"mappings":"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","file":"FormBinder.js","sourcesContent":["import EventEmitter from \"eventemitter3\"\n\nexport class FormBinder extends EventEmitter {\n  constructor(originalObj, bindings, onAnyModified) {\n    super()\n    this._id = originalObj._id\n    this._onAnyModified = onAnyModified\n    this._fields = {}\n    this._originalObj = originalObj\n\n    for (let name in bindings) {\n      let binding = bindings[name]\n      let field = {\n        isDisabled: this._ensureFunc(binding.isDisabled, false),\n        isReadOnly: this._ensureFunc(binding.isReadOnly, false),\n        isVisible: this._ensureFunc(binding.isVisible, true),\n        noValue: !!binding.noValue,\n      }\n\n      if (field.noValue) {\n        field.state = {}\n      } else {\n        field.alwaysGet = binding.alwaysGet\n        field.isValid = this._ensureFunc(binding.isValid, true, true)\n\n        const initValue = !binding.initValue ? \"\" : binding.initValue\n        let value = FormBinder._getObjectFieldValue(originalObj, name)\n\n        if (typeof value === \"undefined\") {\n          value = initValue\n        }\n\n        field.unmodifiedValue = value\n\n        field.post = field.post || ((v) => v)\n        field.state = {\n          value: binding.pre ? binding.pre(value) : value,\n          modified: false,\n        }\n      }\n\n      this._fields[name] = field\n    }\n\n    this._updateFieldStates()\n  }\n\n  get id() {\n    return this._id\n  }\n\n  get originalObj() {\n    return this._originalObj\n  }\n\n  _ensureFunc(obj, def, validator) {\n    // If obj is a func and does not return bool there are problems, so we wrap it.\n    if (obj) {\n      if (obj.constructor === Function) {\n        if (validator) {\n          return (r, v, m) => !!obj(r, v, m)\n        } else {\n          return (r) => !!obj(r)\n        }\n      } else {\n        return () => !!obj\n      }\n    } else {\n      return () => def\n    }\n  }\n\n  updateFieldValue(name, newValue) {\n    let lastAnyModified = this.anyModified\n    let field = this._fields[name]\n\n    if (field) {\n      if (field.noValue) {\n        throw new Error(`Attempt to update value for non-value field '${name}'`)\n      }\n\n      field.state.value = newValue\n      field.state.modified = newValue !== field.unmodifiedValue\n\n      this._updateFieldStates(field)\n\n      if (lastAnyModified !== this.anyModified && this._onAnyModified) {\n        this._onAnyModified(this.anyModified)\n      }\n    }\n\n    return field.state\n  }\n\n  _updateFieldStates() {\n    this.anyModified = false\n    this.allValid = true\n\n    for (let name in this._fields) {\n      let field = this._fields[name]\n\n      // Do non-value fields after value fields and ignore any just changed field\n      if (field.noValue) {\n        continue\n      }\n\n      let valid = field.isValid(this, field.state.value, field.metadata)\n\n      // Only value fields can change these two properties\n      this.allValid = valid && this.allValid\n      this.anyModified = field.state.modified || this.anyModified\n\n      Object.assign(field.state, {\n        valid,\n        disabled: field.isDisabled(this),\n        readOnly: field.isReadOnly(this),\n        visible: field.isVisible(this),\n      })\n    }\n\n    for (let name in this._fields) {\n      let field = this._fields[name]\n\n      if (!field.noValue) {\n        continue\n      }\n\n      let disabled = field.isDisabled(this)\n      let readOnly = field.isReadOnly(this)\n      let visible = field.isVisible(this)\n\n      // Did the valid, disabled, read-only or visible state of this field change?\n      let anyChanges =\n        disabled !== field.state.disabled ||\n        readOnly !== field.state.readOnly ||\n        visible !== field.state.visible\n\n      if (anyChanges) {\n        field.state = {\n          disabled,\n          readOnly,\n          visible,\n        }\n\n        // Fire an event so the component can update itself\n        this.emit(name, { name, state: field.state })\n      }\n    }\n  }\n\n  getFieldValue(name) {\n    return this.getFieldState(name).value\n  }\n\n  getFieldState(name) {\n    let field = this._fields[name]\n\n    if (!field) {\n      throw new Error(`Field '${name}' does not have a binding entry`)\n    }\n\n    return field.state\n  }\n\n  getModifiedFieldValues() {\n    // Generate an object that has the modified and alwaysGet fields\n    let obj = {}\n\n    if (!this.anyModified && !this.allValid) {\n      return obj\n    }\n\n    // Will have an _id if updating\n    if (this._id) {\n      obj._id = this._id\n    }\n\n    for (let name in this._fields) {\n      let field = this._fields[name]\n\n      if (field.alwaysGet || (!field.noValue && field.state.modified)) {\n        let value = field.state.value\n\n        if (value && value.constructor === \"String\") {\n          value = value.trim()\n\n          if (value === field.unmodifiedValue) {\n            continue\n          }\n        }\n\n        value = field.post ? field.post(value) : value\n\n        FormBinder._setObjectFieldValue(obj, name, value)\n      }\n    }\n\n    return obj\n  }\n\n  static _getObjectFieldValue(obj, name) {\n    name.split(\".\").forEach((namePart) => {\n      if (obj) {\n        obj = obj[namePart]\n      }\n    })\n    return obj\n  }\n\n  static _setObjectFieldValue(obj, name, value) {\n    name.split(\".\").forEach((namePart, i, nameParts) => {\n      if (i < nameParts.length - 1) {\n        if (!obj[namePart]) {\n          obj[namePart] = {}\n        }\n        obj = obj[namePart]\n      } else {\n        obj[namePart] = value\n      }\n    })\n  }\n}\n"]}